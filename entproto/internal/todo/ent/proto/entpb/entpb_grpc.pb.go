// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: entpb/entpb.proto

package entpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttachmentServiceClient is the client API for AttachmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttachmentServiceClient interface {
	CreateAttachment(ctx context.Context, in *CreateAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error)
	GetAttachment(ctx context.Context, in *GetAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error)
	UpdateAttachment(ctx context.Context, in *UpdateAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error)
	DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListAttachment(ctx context.Context, in *ListAttachmentRequest, opts ...grpc.CallOption) (*ListAttachmentResponse, error)
	BatchCreateAttachment(ctx context.Context, in *BatchCreateAttachmentsRequest, opts ...grpc.CallOption) (*BatchCreateAttachmentsResponse, error)
}

type attachmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttachmentServiceClient(cc grpc.ClientConnInterface) AttachmentServiceClient {
	return &attachmentServiceClient{cc}
}

func (c *attachmentServiceClient) CreateAttachment(ctx context.Context, in *CreateAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error) {
	out := new(Attachment)
	err := c.cc.Invoke(ctx, "/entpb.AttachmentService/CreateAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) GetAttachment(ctx context.Context, in *GetAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error) {
	out := new(Attachment)
	err := c.cc.Invoke(ctx, "/entpb.AttachmentService/GetAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) UpdateAttachment(ctx context.Context, in *UpdateAttachmentRequest, opts ...grpc.CallOption) (*Attachment, error) {
	out := new(Attachment)
	err := c.cc.Invoke(ctx, "/entpb.AttachmentService/UpdateAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.AttachmentService/DeleteAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) ListAttachment(ctx context.Context, in *ListAttachmentRequest, opts ...grpc.CallOption) (*ListAttachmentResponse, error) {
	out := new(ListAttachmentResponse)
	err := c.cc.Invoke(ctx, "/entpb.AttachmentService/ListAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentServiceClient) BatchCreateAttachment(ctx context.Context, in *BatchCreateAttachmentsRequest, opts ...grpc.CallOption) (*BatchCreateAttachmentsResponse, error) {
	out := new(BatchCreateAttachmentsResponse)
	err := c.cc.Invoke(ctx, "/entpb.AttachmentService/BatchCreateAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttachmentServiceServer is the server API for AttachmentService service.
// All implementations must embed UnimplementedAttachmentServiceServer
// for forward compatibility
type AttachmentServiceServer interface {
	CreateAttachment(context.Context, *CreateAttachmentRequest) (*Attachment, error)
	GetAttachment(context.Context, *GetAttachmentRequest) (*Attachment, error)
	UpdateAttachment(context.Context, *UpdateAttachmentRequest) (*Attachment, error)
	DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*emptypb.Empty, error)
	ListAttachment(context.Context, *ListAttachmentRequest) (*ListAttachmentResponse, error)
	BatchCreateAttachment(context.Context, *BatchCreateAttachmentsRequest) (*BatchCreateAttachmentsResponse, error)
	mustEmbedUnimplementedAttachmentServiceServer()
}

// UnimplementedAttachmentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttachmentServiceServer struct {
}

func (UnimplementedAttachmentServiceServer) CreateAttachment(context.Context, *CreateAttachmentRequest) (*Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAttachment not implemented")
}
func (UnimplementedAttachmentServiceServer) GetAttachment(context.Context, *GetAttachmentRequest) (*Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachment not implemented")
}
func (UnimplementedAttachmentServiceServer) UpdateAttachment(context.Context, *UpdateAttachmentRequest) (*Attachment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttachment not implemented")
}
func (UnimplementedAttachmentServiceServer) DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttachment not implemented")
}
func (UnimplementedAttachmentServiceServer) ListAttachment(context.Context, *ListAttachmentRequest) (*ListAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAttachment not implemented")
}
func (UnimplementedAttachmentServiceServer) BatchCreateAttachment(context.Context, *BatchCreateAttachmentsRequest) (*BatchCreateAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateAttachment not implemented")
}
func (UnimplementedAttachmentServiceServer) mustEmbedUnimplementedAttachmentServiceServer() {}

// UnsafeAttachmentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttachmentServiceServer will
// result in compilation errors.
type UnsafeAttachmentServiceServer interface {
	mustEmbedUnimplementedAttachmentServiceServer()
}

func RegisterAttachmentServiceServer(s grpc.ServiceRegistrar, srv AttachmentServiceServer) {
	s.RegisterService(&AttachmentService_ServiceDesc, srv)
}

func _AttachmentService_CreateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).CreateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.AttachmentService/CreateAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).CreateAttachment(ctx, req.(*CreateAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_GetAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).GetAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.AttachmentService/GetAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).GetAttachment(ctx, req.(*GetAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_UpdateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).UpdateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.AttachmentService/UpdateAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).UpdateAttachment(ctx, req.(*UpdateAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_DeleteAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).DeleteAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.AttachmentService/DeleteAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).DeleteAttachment(ctx, req.(*DeleteAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_ListAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).ListAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.AttachmentService/ListAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).ListAttachment(ctx, req.(*ListAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttachmentService_BatchCreateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateAttachmentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServiceServer).BatchCreateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.AttachmentService/BatchCreateAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServiceServer).BatchCreateAttachment(ctx, req.(*BatchCreateAttachmentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttachmentService_ServiceDesc is the grpc.ServiceDesc for AttachmentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttachmentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.AttachmentService",
	HandlerType: (*AttachmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAttachment",
			Handler:    _AttachmentService_CreateAttachment_Handler,
		},
		{
			MethodName: "GetAttachment",
			Handler:    _AttachmentService_GetAttachment_Handler,
		},
		{
			MethodName: "UpdateAttachment",
			Handler:    _AttachmentService_UpdateAttachment_Handler,
		},
		{
			MethodName: "DeleteAttachment",
			Handler:    _AttachmentService_DeleteAttachment_Handler,
		},
		{
			MethodName: "ListAttachment",
			Handler:    _AttachmentService_ListAttachment_Handler,
		},
		{
			MethodName: "BatchCreateAttachment",
			Handler:    _AttachmentService_BatchCreateAttachment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// MultiWordSchemaServiceClient is the client API for MultiWordSchemaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiWordSchemaServiceClient interface {
	CreateMultiWordSchema(ctx context.Context, in *CreateMultiWordSchemaRequest, opts ...grpc.CallOption) (*MultiWordSchema, error)
	GetMultiWordSchema(ctx context.Context, in *GetMultiWordSchemaRequest, opts ...grpc.CallOption) (*MultiWordSchema, error)
	UpdateMultiWordSchema(ctx context.Context, in *UpdateMultiWordSchemaRequest, opts ...grpc.CallOption) (*MultiWordSchema, error)
	DeleteMultiWordSchema(ctx context.Context, in *DeleteMultiWordSchemaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListMultiWordSchema(ctx context.Context, in *ListMultiWordSchemaRequest, opts ...grpc.CallOption) (*ListMultiWordSchemaResponse, error)
	BatchCreateMultiWordSchema(ctx context.Context, in *BatchCreateMultiWordSchemasRequest, opts ...grpc.CallOption) (*BatchCreateMultiWordSchemasResponse, error)
}

type multiWordSchemaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiWordSchemaServiceClient(cc grpc.ClientConnInterface) MultiWordSchemaServiceClient {
	return &multiWordSchemaServiceClient{cc}
}

func (c *multiWordSchemaServiceClient) CreateMultiWordSchema(ctx context.Context, in *CreateMultiWordSchemaRequest, opts ...grpc.CallOption) (*MultiWordSchema, error) {
	out := new(MultiWordSchema)
	err := c.cc.Invoke(ctx, "/entpb.MultiWordSchemaService/CreateMultiWordSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiWordSchemaServiceClient) GetMultiWordSchema(ctx context.Context, in *GetMultiWordSchemaRequest, opts ...grpc.CallOption) (*MultiWordSchema, error) {
	out := new(MultiWordSchema)
	err := c.cc.Invoke(ctx, "/entpb.MultiWordSchemaService/GetMultiWordSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiWordSchemaServiceClient) UpdateMultiWordSchema(ctx context.Context, in *UpdateMultiWordSchemaRequest, opts ...grpc.CallOption) (*MultiWordSchema, error) {
	out := new(MultiWordSchema)
	err := c.cc.Invoke(ctx, "/entpb.MultiWordSchemaService/UpdateMultiWordSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiWordSchemaServiceClient) DeleteMultiWordSchema(ctx context.Context, in *DeleteMultiWordSchemaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.MultiWordSchemaService/DeleteMultiWordSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiWordSchemaServiceClient) ListMultiWordSchema(ctx context.Context, in *ListMultiWordSchemaRequest, opts ...grpc.CallOption) (*ListMultiWordSchemaResponse, error) {
	out := new(ListMultiWordSchemaResponse)
	err := c.cc.Invoke(ctx, "/entpb.MultiWordSchemaService/ListMultiWordSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *multiWordSchemaServiceClient) BatchCreateMultiWordSchema(ctx context.Context, in *BatchCreateMultiWordSchemasRequest, opts ...grpc.CallOption) (*BatchCreateMultiWordSchemasResponse, error) {
	out := new(BatchCreateMultiWordSchemasResponse)
	err := c.cc.Invoke(ctx, "/entpb.MultiWordSchemaService/BatchCreateMultiWordSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiWordSchemaServiceServer is the server API for MultiWordSchemaService service.
// All implementations must embed UnimplementedMultiWordSchemaServiceServer
// for forward compatibility
type MultiWordSchemaServiceServer interface {
	CreateMultiWordSchema(context.Context, *CreateMultiWordSchemaRequest) (*MultiWordSchema, error)
	GetMultiWordSchema(context.Context, *GetMultiWordSchemaRequest) (*MultiWordSchema, error)
	UpdateMultiWordSchema(context.Context, *UpdateMultiWordSchemaRequest) (*MultiWordSchema, error)
	DeleteMultiWordSchema(context.Context, *DeleteMultiWordSchemaRequest) (*emptypb.Empty, error)
	ListMultiWordSchema(context.Context, *ListMultiWordSchemaRequest) (*ListMultiWordSchemaResponse, error)
	BatchCreateMultiWordSchema(context.Context, *BatchCreateMultiWordSchemasRequest) (*BatchCreateMultiWordSchemasResponse, error)
	mustEmbedUnimplementedMultiWordSchemaServiceServer()
}

// UnimplementedMultiWordSchemaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultiWordSchemaServiceServer struct {
}

func (UnimplementedMultiWordSchemaServiceServer) CreateMultiWordSchema(context.Context, *CreateMultiWordSchemaRequest) (*MultiWordSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMultiWordSchema not implemented")
}
func (UnimplementedMultiWordSchemaServiceServer) GetMultiWordSchema(context.Context, *GetMultiWordSchemaRequest) (*MultiWordSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultiWordSchema not implemented")
}
func (UnimplementedMultiWordSchemaServiceServer) UpdateMultiWordSchema(context.Context, *UpdateMultiWordSchemaRequest) (*MultiWordSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMultiWordSchema not implemented")
}
func (UnimplementedMultiWordSchemaServiceServer) DeleteMultiWordSchema(context.Context, *DeleteMultiWordSchemaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMultiWordSchema not implemented")
}
func (UnimplementedMultiWordSchemaServiceServer) ListMultiWordSchema(context.Context, *ListMultiWordSchemaRequest) (*ListMultiWordSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMultiWordSchema not implemented")
}
func (UnimplementedMultiWordSchemaServiceServer) BatchCreateMultiWordSchema(context.Context, *BatchCreateMultiWordSchemasRequest) (*BatchCreateMultiWordSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateMultiWordSchema not implemented")
}
func (UnimplementedMultiWordSchemaServiceServer) mustEmbedUnimplementedMultiWordSchemaServiceServer() {
}

// UnsafeMultiWordSchemaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiWordSchemaServiceServer will
// result in compilation errors.
type UnsafeMultiWordSchemaServiceServer interface {
	mustEmbedUnimplementedMultiWordSchemaServiceServer()
}

func RegisterMultiWordSchemaServiceServer(s grpc.ServiceRegistrar, srv MultiWordSchemaServiceServer) {
	s.RegisterService(&MultiWordSchemaService_ServiceDesc, srv)
}

func _MultiWordSchemaService_CreateMultiWordSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMultiWordSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiWordSchemaServiceServer).CreateMultiWordSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.MultiWordSchemaService/CreateMultiWordSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiWordSchemaServiceServer).CreateMultiWordSchema(ctx, req.(*CreateMultiWordSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiWordSchemaService_GetMultiWordSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultiWordSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiWordSchemaServiceServer).GetMultiWordSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.MultiWordSchemaService/GetMultiWordSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiWordSchemaServiceServer).GetMultiWordSchema(ctx, req.(*GetMultiWordSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiWordSchemaService_UpdateMultiWordSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMultiWordSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiWordSchemaServiceServer).UpdateMultiWordSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.MultiWordSchemaService/UpdateMultiWordSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiWordSchemaServiceServer).UpdateMultiWordSchema(ctx, req.(*UpdateMultiWordSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiWordSchemaService_DeleteMultiWordSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMultiWordSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiWordSchemaServiceServer).DeleteMultiWordSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.MultiWordSchemaService/DeleteMultiWordSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiWordSchemaServiceServer).DeleteMultiWordSchema(ctx, req.(*DeleteMultiWordSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiWordSchemaService_ListMultiWordSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMultiWordSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiWordSchemaServiceServer).ListMultiWordSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.MultiWordSchemaService/ListMultiWordSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiWordSchemaServiceServer).ListMultiWordSchema(ctx, req.(*ListMultiWordSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MultiWordSchemaService_BatchCreateMultiWordSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateMultiWordSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiWordSchemaServiceServer).BatchCreateMultiWordSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.MultiWordSchemaService/BatchCreateMultiWordSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiWordSchemaServiceServer).BatchCreateMultiWordSchema(ctx, req.(*BatchCreateMultiWordSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MultiWordSchemaService_ServiceDesc is the grpc.ServiceDesc for MultiWordSchemaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiWordSchemaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.MultiWordSchemaService",
	HandlerType: (*MultiWordSchemaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMultiWordSchema",
			Handler:    _MultiWordSchemaService_CreateMultiWordSchema_Handler,
		},
		{
			MethodName: "GetMultiWordSchema",
			Handler:    _MultiWordSchemaService_GetMultiWordSchema_Handler,
		},
		{
			MethodName: "UpdateMultiWordSchema",
			Handler:    _MultiWordSchemaService_UpdateMultiWordSchema_Handler,
		},
		{
			MethodName: "DeleteMultiWordSchema",
			Handler:    _MultiWordSchemaService_DeleteMultiWordSchema_Handler,
		},
		{
			MethodName: "ListMultiWordSchema",
			Handler:    _MultiWordSchemaService_ListMultiWordSchema_Handler,
		},
		{
			MethodName: "BatchCreateMultiWordSchema",
			Handler:    _MultiWordSchemaService_BatchCreateMultiWordSchema_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// NilExampleServiceClient is the client API for NilExampleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NilExampleServiceClient interface {
	CreateNilExample(ctx context.Context, in *CreateNilExampleRequest, opts ...grpc.CallOption) (*NilExample, error)
	GetNilExample(ctx context.Context, in *GetNilExampleRequest, opts ...grpc.CallOption) (*NilExample, error)
	UpdateNilExample(ctx context.Context, in *UpdateNilExampleRequest, opts ...grpc.CallOption) (*NilExample, error)
	DeleteNilExample(ctx context.Context, in *DeleteNilExampleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListNilExample(ctx context.Context, in *ListNilExampleRequest, opts ...grpc.CallOption) (*ListNilExampleResponse, error)
	BatchCreateNilExample(ctx context.Context, in *BatchCreateNilExamplesRequest, opts ...grpc.CallOption) (*BatchCreateNilExamplesResponse, error)
}

type nilExampleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNilExampleServiceClient(cc grpc.ClientConnInterface) NilExampleServiceClient {
	return &nilExampleServiceClient{cc}
}

func (c *nilExampleServiceClient) CreateNilExample(ctx context.Context, in *CreateNilExampleRequest, opts ...grpc.CallOption) (*NilExample, error) {
	out := new(NilExample)
	err := c.cc.Invoke(ctx, "/entpb.NilExampleService/CreateNilExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nilExampleServiceClient) GetNilExample(ctx context.Context, in *GetNilExampleRequest, opts ...grpc.CallOption) (*NilExample, error) {
	out := new(NilExample)
	err := c.cc.Invoke(ctx, "/entpb.NilExampleService/GetNilExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nilExampleServiceClient) UpdateNilExample(ctx context.Context, in *UpdateNilExampleRequest, opts ...grpc.CallOption) (*NilExample, error) {
	out := new(NilExample)
	err := c.cc.Invoke(ctx, "/entpb.NilExampleService/UpdateNilExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nilExampleServiceClient) DeleteNilExample(ctx context.Context, in *DeleteNilExampleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.NilExampleService/DeleteNilExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nilExampleServiceClient) ListNilExample(ctx context.Context, in *ListNilExampleRequest, opts ...grpc.CallOption) (*ListNilExampleResponse, error) {
	out := new(ListNilExampleResponse)
	err := c.cc.Invoke(ctx, "/entpb.NilExampleService/ListNilExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nilExampleServiceClient) BatchCreateNilExample(ctx context.Context, in *BatchCreateNilExamplesRequest, opts ...grpc.CallOption) (*BatchCreateNilExamplesResponse, error) {
	out := new(BatchCreateNilExamplesResponse)
	err := c.cc.Invoke(ctx, "/entpb.NilExampleService/BatchCreateNilExample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NilExampleServiceServer is the server API for NilExampleService service.
// All implementations must embed UnimplementedNilExampleServiceServer
// for forward compatibility
type NilExampleServiceServer interface {
	CreateNilExample(context.Context, *CreateNilExampleRequest) (*NilExample, error)
	GetNilExample(context.Context, *GetNilExampleRequest) (*NilExample, error)
	UpdateNilExample(context.Context, *UpdateNilExampleRequest) (*NilExample, error)
	DeleteNilExample(context.Context, *DeleteNilExampleRequest) (*emptypb.Empty, error)
	ListNilExample(context.Context, *ListNilExampleRequest) (*ListNilExampleResponse, error)
	BatchCreateNilExample(context.Context, *BatchCreateNilExamplesRequest) (*BatchCreateNilExamplesResponse, error)
	mustEmbedUnimplementedNilExampleServiceServer()
}

// UnimplementedNilExampleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNilExampleServiceServer struct {
}

func (UnimplementedNilExampleServiceServer) CreateNilExample(context.Context, *CreateNilExampleRequest) (*NilExample, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNilExample not implemented")
}
func (UnimplementedNilExampleServiceServer) GetNilExample(context.Context, *GetNilExampleRequest) (*NilExample, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNilExample not implemented")
}
func (UnimplementedNilExampleServiceServer) UpdateNilExample(context.Context, *UpdateNilExampleRequest) (*NilExample, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNilExample not implemented")
}
func (UnimplementedNilExampleServiceServer) DeleteNilExample(context.Context, *DeleteNilExampleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNilExample not implemented")
}
func (UnimplementedNilExampleServiceServer) ListNilExample(context.Context, *ListNilExampleRequest) (*ListNilExampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNilExample not implemented")
}
func (UnimplementedNilExampleServiceServer) BatchCreateNilExample(context.Context, *BatchCreateNilExamplesRequest) (*BatchCreateNilExamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateNilExample not implemented")
}
func (UnimplementedNilExampleServiceServer) mustEmbedUnimplementedNilExampleServiceServer() {}

// UnsafeNilExampleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NilExampleServiceServer will
// result in compilation errors.
type UnsafeNilExampleServiceServer interface {
	mustEmbedUnimplementedNilExampleServiceServer()
}

func RegisterNilExampleServiceServer(s grpc.ServiceRegistrar, srv NilExampleServiceServer) {
	s.RegisterService(&NilExampleService_ServiceDesc, srv)
}

func _NilExampleService_CreateNilExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNilExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilExampleServiceServer).CreateNilExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.NilExampleService/CreateNilExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilExampleServiceServer).CreateNilExample(ctx, req.(*CreateNilExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NilExampleService_GetNilExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNilExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilExampleServiceServer).GetNilExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.NilExampleService/GetNilExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilExampleServiceServer).GetNilExample(ctx, req.(*GetNilExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NilExampleService_UpdateNilExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNilExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilExampleServiceServer).UpdateNilExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.NilExampleService/UpdateNilExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilExampleServiceServer).UpdateNilExample(ctx, req.(*UpdateNilExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NilExampleService_DeleteNilExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNilExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilExampleServiceServer).DeleteNilExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.NilExampleService/DeleteNilExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilExampleServiceServer).DeleteNilExample(ctx, req.(*DeleteNilExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NilExampleService_ListNilExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNilExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilExampleServiceServer).ListNilExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.NilExampleService/ListNilExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilExampleServiceServer).ListNilExample(ctx, req.(*ListNilExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NilExampleService_BatchCreateNilExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateNilExamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NilExampleServiceServer).BatchCreateNilExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.NilExampleService/BatchCreateNilExample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NilExampleServiceServer).BatchCreateNilExample(ctx, req.(*BatchCreateNilExamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NilExampleService_ServiceDesc is the grpc.ServiceDesc for NilExampleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NilExampleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.NilExampleService",
	HandlerType: (*NilExampleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNilExample",
			Handler:    _NilExampleService_CreateNilExample_Handler,
		},
		{
			MethodName: "GetNilExample",
			Handler:    _NilExampleService_GetNilExample_Handler,
		},
		{
			MethodName: "UpdateNilExample",
			Handler:    _NilExampleService_UpdateNilExample_Handler,
		},
		{
			MethodName: "DeleteNilExample",
			Handler:    _NilExampleService_DeleteNilExample_Handler,
		},
		{
			MethodName: "ListNilExample",
			Handler:    _NilExampleService_ListNilExample_Handler,
		},
		{
			MethodName: "BatchCreateNilExample",
			Handler:    _NilExampleService_BatchCreateNilExample_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// PetServiceClient is the client API for PetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetServiceClient interface {
	CreatePet(ctx context.Context, in *CreatePetRequest, opts ...grpc.CallOption) (*Pet, error)
	GetPet(ctx context.Context, in *GetPetRequest, opts ...grpc.CallOption) (*Pet, error)
	UpdatePet(ctx context.Context, in *UpdatePetRequest, opts ...grpc.CallOption) (*Pet, error)
	DeletePet(ctx context.Context, in *DeletePetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListPet(ctx context.Context, in *ListPetRequest, opts ...grpc.CallOption) (*ListPetResponse, error)
	BatchCreatePet(ctx context.Context, in *BatchCreatePetsRequest, opts ...grpc.CallOption) (*BatchCreatePetsResponse, error)
}

type petServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPetServiceClient(cc grpc.ClientConnInterface) PetServiceClient {
	return &petServiceClient{cc}
}

func (c *petServiceClient) CreatePet(ctx context.Context, in *CreatePetRequest, opts ...grpc.CallOption) (*Pet, error) {
	out := new(Pet)
	err := c.cc.Invoke(ctx, "/entpb.PetService/CreatePet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petServiceClient) GetPet(ctx context.Context, in *GetPetRequest, opts ...grpc.CallOption) (*Pet, error) {
	out := new(Pet)
	err := c.cc.Invoke(ctx, "/entpb.PetService/GetPet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petServiceClient) UpdatePet(ctx context.Context, in *UpdatePetRequest, opts ...grpc.CallOption) (*Pet, error) {
	out := new(Pet)
	err := c.cc.Invoke(ctx, "/entpb.PetService/UpdatePet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petServiceClient) DeletePet(ctx context.Context, in *DeletePetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.PetService/DeletePet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petServiceClient) ListPet(ctx context.Context, in *ListPetRequest, opts ...grpc.CallOption) (*ListPetResponse, error) {
	out := new(ListPetResponse)
	err := c.cc.Invoke(ctx, "/entpb.PetService/ListPet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petServiceClient) BatchCreatePet(ctx context.Context, in *BatchCreatePetsRequest, opts ...grpc.CallOption) (*BatchCreatePetsResponse, error) {
	out := new(BatchCreatePetsResponse)
	err := c.cc.Invoke(ctx, "/entpb.PetService/BatchCreatePet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetServiceServer is the server API for PetService service.
// All implementations must embed UnimplementedPetServiceServer
// for forward compatibility
type PetServiceServer interface {
	CreatePet(context.Context, *CreatePetRequest) (*Pet, error)
	GetPet(context.Context, *GetPetRequest) (*Pet, error)
	UpdatePet(context.Context, *UpdatePetRequest) (*Pet, error)
	DeletePet(context.Context, *DeletePetRequest) (*emptypb.Empty, error)
	ListPet(context.Context, *ListPetRequest) (*ListPetResponse, error)
	BatchCreatePet(context.Context, *BatchCreatePetsRequest) (*BatchCreatePetsResponse, error)
	mustEmbedUnimplementedPetServiceServer()
}

// UnimplementedPetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPetServiceServer struct {
}

func (UnimplementedPetServiceServer) CreatePet(context.Context, *CreatePetRequest) (*Pet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePet not implemented")
}
func (UnimplementedPetServiceServer) GetPet(context.Context, *GetPetRequest) (*Pet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPet not implemented")
}
func (UnimplementedPetServiceServer) UpdatePet(context.Context, *UpdatePetRequest) (*Pet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePet not implemented")
}
func (UnimplementedPetServiceServer) DeletePet(context.Context, *DeletePetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePet not implemented")
}
func (UnimplementedPetServiceServer) ListPet(context.Context, *ListPetRequest) (*ListPetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPet not implemented")
}
func (UnimplementedPetServiceServer) BatchCreatePet(context.Context, *BatchCreatePetsRequest) (*BatchCreatePetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreatePet not implemented")
}
func (UnimplementedPetServiceServer) mustEmbedUnimplementedPetServiceServer() {}

// UnsafePetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetServiceServer will
// result in compilation errors.
type UnsafePetServiceServer interface {
	mustEmbedUnimplementedPetServiceServer()
}

func RegisterPetServiceServer(s grpc.ServiceRegistrar, srv PetServiceServer) {
	s.RegisterService(&PetService_ServiceDesc, srv)
}

func _PetService_CreatePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).CreatePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.PetService/CreatePet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).CreatePet(ctx, req.(*CreatePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetService_GetPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).GetPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.PetService/GetPet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).GetPet(ctx, req.(*GetPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetService_UpdatePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).UpdatePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.PetService/UpdatePet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).UpdatePet(ctx, req.(*UpdatePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetService_DeletePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).DeletePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.PetService/DeletePet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).DeletePet(ctx, req.(*DeletePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetService_ListPet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).ListPet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.PetService/ListPet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).ListPet(ctx, req.(*ListPetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetService_BatchCreatePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreatePetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).BatchCreatePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.PetService/BatchCreatePet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).BatchCreatePet(ctx, req.(*BatchCreatePetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PetService_ServiceDesc is the grpc.ServiceDesc for PetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.PetService",
	HandlerType: (*PetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePet",
			Handler:    _PetService_CreatePet_Handler,
		},
		{
			MethodName: "GetPet",
			Handler:    _PetService_GetPet_Handler,
		},
		{
			MethodName: "UpdatePet",
			Handler:    _PetService_UpdatePet_Handler,
		},
		{
			MethodName: "DeletePet",
			Handler:    _PetService_DeletePet_Handler,
		},
		{
			MethodName: "ListPet",
			Handler:    _PetService_ListPet_Handler,
		},
		{
			MethodName: "BatchCreatePet",
			Handler:    _PetService_BatchCreatePet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// PonyServiceClient is the client API for PonyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PonyServiceClient interface {
	BatchCreatePony(ctx context.Context, in *BatchCreatePoniesRequest, opts ...grpc.CallOption) (*BatchCreatePoniesResponse, error)
}

type ponyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPonyServiceClient(cc grpc.ClientConnInterface) PonyServiceClient {
	return &ponyServiceClient{cc}
}

func (c *ponyServiceClient) BatchCreatePony(ctx context.Context, in *BatchCreatePoniesRequest, opts ...grpc.CallOption) (*BatchCreatePoniesResponse, error) {
	out := new(BatchCreatePoniesResponse)
	err := c.cc.Invoke(ctx, "/entpb.PonyService/BatchCreatePony", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PonyServiceServer is the server API for PonyService service.
// All implementations must embed UnimplementedPonyServiceServer
// for forward compatibility
type PonyServiceServer interface {
	BatchCreatePony(context.Context, *BatchCreatePoniesRequest) (*BatchCreatePoniesResponse, error)
	mustEmbedUnimplementedPonyServiceServer()
}

// UnimplementedPonyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPonyServiceServer struct {
}

func (UnimplementedPonyServiceServer) BatchCreatePony(context.Context, *BatchCreatePoniesRequest) (*BatchCreatePoniesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreatePony not implemented")
}
func (UnimplementedPonyServiceServer) mustEmbedUnimplementedPonyServiceServer() {}

// UnsafePonyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PonyServiceServer will
// result in compilation errors.
type UnsafePonyServiceServer interface {
	mustEmbedUnimplementedPonyServiceServer()
}

func RegisterPonyServiceServer(s grpc.ServiceRegistrar, srv PonyServiceServer) {
	s.RegisterService(&PonyService_ServiceDesc, srv)
}

func _PonyService_BatchCreatePony_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreatePoniesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PonyServiceServer).BatchCreatePony(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.PonyService/BatchCreatePony",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PonyServiceServer).BatchCreatePony(ctx, req.(*BatchCreatePoniesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PonyService_ServiceDesc is the grpc.ServiceDesc for PonyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PonyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.PonyService",
	HandlerType: (*PonyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchCreatePony",
			Handler:    _PonyService_BatchCreatePony_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error)
	BatchCreateUser(ctx context.Context, in *BatchCreateUsersRequest, opts ...grpc.CallOption) (*BatchCreateUsersResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/entpb.UserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUser(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/entpb.UserService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateUser(ctx context.Context, in *UpdateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/entpb.UserService/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/entpb.UserService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ListUser(ctx context.Context, in *ListUserRequest, opts ...grpc.CallOption) (*ListUserResponse, error) {
	out := new(ListUserResponse)
	err := c.cc.Invoke(ctx, "/entpb.UserService/ListUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) BatchCreateUser(ctx context.Context, in *BatchCreateUsersRequest, opts ...grpc.CallOption) (*BatchCreateUsersResponse, error) {
	out := new(BatchCreateUsersResponse)
	err := c.cc.Invoke(ctx, "/entpb.UserService/BatchCreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	CreateUser(context.Context, *CreateUserRequest) (*User, error)
	GetUser(context.Context, *GetUserRequest) (*User, error)
	UpdateUser(context.Context, *UpdateUserRequest) (*User, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error)
	ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error)
	BatchCreateUser(context.Context, *BatchCreateUsersRequest) (*BatchCreateUsersResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) GetUser(context.Context, *GetUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServiceServer) UpdateUser(context.Context, *UpdateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) ListUser(context.Context, *ListUserRequest) (*ListUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUser not implemented")
}
func (UnimplementedUserServiceServer) BatchCreateUser(context.Context, *BatchCreateUsersRequest) (*BatchCreateUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateUser not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*GetUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.UserService/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateUser(ctx, req.(*UpdateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.UserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ListUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ListUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.UserService/ListUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ListUser(ctx, req.(*ListUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_BatchCreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).BatchCreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/entpb.UserService/BatchCreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).BatchCreateUser(ctx, req.(*BatchCreateUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "entpb.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserService_GetUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _UserService_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "ListUser",
			Handler:    _UserService_ListUser_Handler,
		},
		{
			MethodName: "BatchCreateUser",
			Handler:    _UserService_BatchCreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "entpb/entpb.proto",
}
